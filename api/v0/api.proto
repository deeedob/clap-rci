syntax = "proto3";

package api.v0;

// #### Messages ####

message None {}

message ClientRequest {}

enum Event {
  PluginActivate                 = 0;
  PluginDeactivate               = 23;
  PluginStartProcessing          = 24;
  PluginStopProcessing           = 25;
  PluginReset                    = 44;

  GuiCreate                      = 26;
  GuiDestroy                     = 27;
  GuiShow                        = 28;
  GuiHide                        = 29;
  GuiSetTransient                = 30;

  Param                          = 31;
  ParamInfo                      = 35;
  Note                           = 37;

  EventSuccess                   = 41;
  EventFailed                    = 42;
  EventInvalid                   = 43;
}

// TODO: Host and Plugin Extensions

message ClapEventGui {
  enum Type {
    Create = 0;
    Destroy = 1;
    Show = 2;
    Hide = 3;
    // If plugin window is floating
    Transient = 4;
    SuggestTitle = 5;
    // Else, TODO: implement
  }
  int64 window_id = 1;
}

message ClapEventNote {
  enum Type {
    NoteOn = 0;
    NoteOff = 1;
    NoteChoke = 2;
    NoteEnd = 3;
    NoteExpression = 4;
  }
  enum ExpressionType {
    Volume = 0;
    Pan = 1;
    Tuning = 2;
    Vibrato = 3;
    Expression = 4;
    Brightness = 5;
    Pressure = 6;
    None = -1;
  }
  int32 note_id = 1;
  int32 port_index = 2;
  int32 channel = 3;
  int32 key = 4;
  double value = 5;
  Type type = 6;
  ExpressionType expression = 7; // TODO: Maybe oneof? Or should we split this into a separate message?
}

message ClapEventParam {
  enum Type {
    Value = 0;
    Modulation = 1;
    GestureBegin = 2;
    GestureEnd = 3;
  }
  Type type = 1;
  uint32 param_id = 2;
  double value = 3;
  double modulation = 4;
}

message ClapEventParamInfo {
  uint32 param_id = 1;
  string name = 2;
  string module = 3;
  double min_value = 4;
  double max_value = 5;
  double default_value = 6;
}

message ClapEventMainSync {
  int64 window_id = 1;
}

message TimestampMsg {
  int64 seconds = 1;
  int64 nanos = 2;
}

// #### RPCs ####

service ClapInterface {
  rpc ServerEventStream(ClientRequest) returns (stream ServerEvents) {}
  rpc ClientEventCall(ClientEvent) returns (None) {}
  rpc ClientParamCall(ClientParams) returns (None) {}
}

// Clients -> Plugin, Main
message ClientEvent {
  Event event = 1;
}

// Plugin -> Clients
message ServerEvent {
  Event event = 1;
  oneof payload {
    ClapEventNote note = 2;
    ClapEventParam param = 3;
    ClapEventParamInfo param_info = 4;
    ClapEventMainSync main_sync = 5;
  }
}

message ServerEvents {
  repeated ServerEvent events = 1;
}

// Clients -> Plugin, Audio
message ClientParam {
  Event event = 1;
  ClapEventParam param = 2;
  TimestampMsg timestamp = 3;
}

message ClientParams {
  repeated ClientParam params = 1;
}
